@page "/"

<PageTitle>VSR-KMS Index</PageTitle>

@if (auditPreviews.Any() == false)
{
    @*if (seacrhedForAudits == false)
    {
        <DynamicComponent Type="@typeof(LoadSpinner)" />
    }
    else
    {
        <h3>Geen metingen gevonden.</h3>
    }*@
}
else
{
    <Connection>
        <Online>
            <h1 style="color: green">Online</h1>
            <AuditPreviewTable AuditPreviews="@auditPreviews"></AuditPreviewTable>
        </Online>
        <Offline>
            <h1 style="color: red">Offline</h1>
            <AuditPreviewTable AuditPreviews="@auditPreviews.Where(i => i.IsLocallyStored == true).ToList()"></AuditPreviewTable>
        </Offline>
    </Connection>
    @*<button class="btn btn-primary" @onclick="DEBUG">Get Data</button>*@
}

@code {
    private bool isOnline = false;
    private bool seacrhedForAudits = false;
    private List<AuditPreview> auditPreviews = new List<AuditPreview>();

    private List<AuditPreview> GetAudits(bool isOnline)
    {
        if (isOnline == false)
        {
            return auditPreviews.Where(i => i.IsLocallyStored == true).ToList();
        }
        return auditPreviews;
    }

    private async Task LoadAudits()
    {
        List<AuditPreview> data = TestData.GetAudits();
        //check if client is online, otherwise only download local audits
        //if (IsOnline == false)
        //{
            using (var db = await this.DbFactory.Create<Database>())
            {
                int[] localAuditIds = db.Audits.Select(i => i.Id).ToArray();
                foreach (AuditPreview auditPreview in data)
                {
                    if (localAuditIds.Contains(auditPreview.Id))
                    {
                        auditPreview.IsLocallyStored = true;
                    }
                }
            }
        //}
        auditPreviews = data;
        seacrhedForAudits = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAudits();
    }
 }