@page "/AuditRoomElementFaultList"

@if (Current.Instance.AuditCategory == null || Current.Instance.Room == null || Current.Instance.RoomElement == null)
{
    <DynamicComponent Type="@typeof(LoadSpinner)" />
}
else
{
    <h5 class="info-text">Ruimte: @Current.Instance.Room.Number</h5>
    <h5 class="info-text">Element: @Current.Instance.RoomElement.Name</h5>
    <h5 class="info-text">Totaal aantal fouten: @currentRoomElementFaultAmount</h5>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Foutsoort</th>
                <th>Aantal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (FaultType faultType in Globals.CurrentAudit.FaultTypes)
            {
                Fault fault = Current.Instance.RoomElement.Faults == null ? null : Current.Instance.RoomElement.Faults.SingleOrDefault(i => i.FaultType.Id == faultType.Id);
                int count = fault == null ? 0 : fault.Count;

                <tr id="@faultType.Id">
                    <td>@faultType.Name</td>
                    <td><input type="number" value="@count" min="0" step="1" class="form-control" id="amountInput" style="width:10%" @onchange="args => ChangeCount(args, faultType)"></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Fault> roomElementFaults = new List<Fault>();

    private int currentRoomElementFaultAmount
    {
        get { return Current.Instance.RoomElement.Faults == null ? 0 : Current.Instance.RoomElement.Faults.Sum(i => i.Count); }
    }


    private void ChangeCount(ChangeEventArgs args, FaultType faultType)
    {
        //try to get the value of the spinbox, otherwise default 0
        int value = 0;
        int.TryParse(args.Value.ToString(), out value);

        //check if roomelement already has faults, otherwise create new list
        if (Current.Instance.RoomElement.Faults == null)
        {
            Current.Instance.RoomElement.Faults = new List<Fault>();
        }

        //check if roomelement already has current changed fault, otherwise create
        Fault fault = Current.Instance.RoomElement.Faults.SingleOrDefault(i => i.FaultType.Id == faultType.Id);
        if (fault == null)
        {
            fault = new Fault()
            {
                FaultType = faultType,
                Guid = Guid.NewGuid().ToString()
            };
            Current.Instance.RoomElement.Faults.Add(fault);
        }
        //now it's sure fault isn't null, set count
        fault.Count = value;
    }
}
